using System;
using System.Collections.Generic;

namespace BatchImport
{
    abstract class DomainModel
    {
        public uint Id { get; set; }//incremental generated by DB
        public string Name { get; set; }

        public abstract IEnumerable<string> Validate(HashSet<DomainModel> mastersHashSet);
        public abstract bool IsValid();
    }


    sealed class CampusDomainModel : DomainModel, IEquatable<CampusDomainModel>
    {
        public string CampusCode { get; set; } //Key out of this domain

        public bool Equals(CampusDomainModel other)
        {
            if (other is null || other.CampusCode is null)
                return false;

            return other.CampusCode.Equals(CampusCode, StringComparison.OrdinalIgnoreCase);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = (hash * 16777619) ^ CampusCode?.GetHashCode() ?? default;

                return hash;
            }
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as CampusDomainModel);
        }

        public override bool IsValid() => true;

        public override string ToString() => $"Campus {CampusCode}-{Name}"; //it's very helpful to debug and to show on notifications
        /// <summary>
        /// !!!!!! Created in v2 !!!!!!!!!
        /// </summary>
        /// <param name="myObjectPool"></param>
        /// <returns></returns>
        public override IEnumerable<string> Validate(HashSet<DomainModel> mastersHashSet)
        {
            yield break;
        }
    }


    sealed class CourseDomainModel : DomainModel, IEquatable<CourseDomainModel>
    {
        public string CourseCode { get; set; } //Key out of this domain
        public string CampusCode { get; set; }
        public DateTime StartDate { get; set; }
        public uint Seat { get; set; }
        public uint Capactity { get; set; }
        public uint Room { get; set; }

        public bool Equals(CourseDomainModel other)
        {
            if (other is null || other.CourseCode is null || other.CampusCode is null)
                return false;

            return other.CourseCode.Equals(CourseCode, StringComparison.OrdinalIgnoreCase) &&
                   other.CampusCode.Equals(CampusCode, StringComparison.OrdinalIgnoreCase);

        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = (hash * 16777619) ^ CourseCode?.GetHashCode() ?? default;
                hash = (hash * 16777619) ^ CampusCode?.GetHashCode() ?? default;

                return hash;
            }
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as CourseDomainModel);
        }

        public override bool IsValid()
        {
            if (Seat > Capactity)
                return false;

            return false;
        }

        public override string ToString() => $"Course {Name} | Key {CourseCode} | Campus {CampusCode}"; //it's very helpful to debug and to show on notifications

        /// <summary>
        /// !!!!!! Created in v2 !!!!!!!!!
        /// </summary>
        /// <param name="myObjectPool"></param>
        /// <returns></returns>
        public override IEnumerable<string> Validate(HashSet<DomainModel> mastersHashSet)
        {
            //var campusKey = (CampusDomainModel)myObjectPool[MasterInstance.Campus];
            var campusKey = new CampusDomainModel { CampusCode = CampusCode };
            if (!mastersHashSet.TryGetValue(campusKey, out var masterIstance) || !masterIstance.IsValid())
            {
                yield return $"Class {this} was discarded because of {campusKey}";
            }
        }
    }


    sealed class TeacherDomainModel : DomainModel, IEquatable<TeacherDomainModel>
    {
        public string SocialSecurityCode { get; set; } //Key out of this domain


        public bool Equals(TeacherDomainModel other)
        {
            if (other == null)
                return false;

            return other.SocialSecurityCode.Equals(SocialSecurityCode, StringComparison.OrdinalIgnoreCase);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as TeacherDomainModel);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = (hash * 16777619) ^ SocialSecurityCode?.GetHashCode() ?? default;

                return hash;
            }
        }


        public override bool IsValid()
        {
            return !string.IsNullOrEmpty(SocialSecurityCode);
        }
        public override string ToString() => $"Teacher {SocialSecurityCode}"; //it's very helpful to debug and to show on notifications
        /// <summary>
        /// !!!!!! Created in v2 !!!!!!!!!
        /// </summary>
        /// <param name="_myObjectPool"></param>
        /// <returns></returns>
        public override IEnumerable<string> Validate(HashSet<DomainModel> mastersHashSet)
        {
            yield break;
        }
    }


    sealed class ClassDomainModel : DomainModel, IEquatable<ClassDomainModel>
    {
        public string CourseCode { get; set; }
        public string TeacherSocialSecurityCode { get; set; }
        public string StartTime { get; set; }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = (hash * 16777619) ^ TeacherSocialSecurityCode?.GetHashCode() ?? default;
                hash = (hash * 16777619) ^ CourseCode?.GetHashCode() ?? default;
                hash = (hash * 16777619) ^ StartTime.GetHashCode();

                return hash;
            }
        }

        public bool Equals(ClassDomainModel other)
        {
            if (other is null)
                return false;

            return other.TeacherSocialSecurityCode.Equals(TeacherSocialSecurityCode, StringComparison.OrdinalIgnoreCase)
                && other.CourseCode.Equals(CourseCode, StringComparison.OrdinalIgnoreCase);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as ClassDomainModel);
        }

        public override bool IsValid()
        {
            return !string.IsNullOrEmpty(TeacherSocialSecurityCode) &&
                !string.IsNullOrEmpty(CourseCode) &&
                !string.IsNullOrEmpty(StartTime);
        }

        //it's very helpful to debug and to show on notifications
        public override string ToString() => $"Class {CourseCode} - {Name} | Teacher {TeacherSocialSecurityCode} ";

        /// <summary>
        /// !!!!!! Created in v2 !!!!!!!!!
        /// </summary>
        /// <param name="myKeyPool"></param>
        /// <returns></returns>
        // use co-routine as much as possible
        //public override IEnumerable<string> Validate(IDictionary<MasterInstance, DomainModel> myKeyPool, HashSet<DomainModel> mastersHashSet) 
        public override IEnumerable<string> Validate(HashSet<DomainModel> mastersHashSet)
        {
            if (!IsValid())
            {
                yield return $"Class {this} is invalid";
            }

            var teacherKey = new TeacherDomainModel { SocialSecurityCode = TeacherSocialSecurityCode };
            if (!mastersHashSet.TryGetValue(teacherKey, out var masterIstance) || !masterIstance.IsValid())
            {
                yield return $"Class {this} was discarded because of {teacherKey}";
            }


            var courseKey = new CourseDomainModel();
            courseKey.CourseCode = CourseCode;
            courseKey.CampusCode = CourseCode.Split('-')[1];
            if (!mastersHashSet.TryGetValue(courseKey, out var courseIstance) || !courseIstance.IsValid())
            {
                yield return $"Class {this} was discarded because of {courseKey}";
            }
            else
            {
                foreach (var messageError in courseIstance.Validate(mastersHashSet))
                {
                    yield return messageError;
                }
            }
        }
    }
}